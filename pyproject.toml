[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name = 'password-manager'
version = "0.1.0"
description = 'Local Web App for managing your passwords'
authors = [
  'Danylo Zdoryk <danylozdoryk1@gmail.com>'
]
readme = "README.md"
#packages = [{include = "poetry_demo"}]


#[project]
##name = 'password-manager'
##dynamic = [
##  'version'
##]
##description = 'Local Web App for managing your passwords'
##readme = 'README.md'
#authors = [
#  { name = 'Danylo Zdoryk', email='danylozdoryk1@gmail.com' },
#]
#license = {file = 'LICENSE'}


[tool.poetry.dependencies]
python = '^3.12'
django = "^5.0"
pycryptodome = "^3.19.0"
keyring = "^24.1.0"

# resulting files.
#[tool.versioneer]
#VCS = "git"
#style = "pep440"
#versionfile_source = "pandas/_version.py"
#versionfile_build = "pandas/_version.py"
#tag_prefix = "v"
#parentdir_prefix = "pandas-"
#
#[tool.meson-python.args]
#setup = ['--vsenv'] # For Windows
#
#[tool.cibuildwheel]
#skip = "cp36-* cp37-* cp38-* pp* *_i686 *_ppc64le *_s390x"
#build-verbosity = "3"
#environment = {LDFLAGS="-Wl,--strip-all"}
#test-requires = "hypothesis>=6.46.1 pytest>=7.3.2 pytest-xdist>=2.2.0"
#test-command = """
#  PANDAS_CI='1' python -c 'import pandas as pd; \
#  pd.test(extra_args=["-m not clipboard and not single_cpu and not slow and not network and not db", "-n 2", "--no-strict-data-files"]); \
#  pd.test(extra_args=["-m not clipboard and single_cpu and not slow and not network and not db", "--no-strict-data-files"]);' \
#  """
#
#[tool.cibuildwheel.macos]
#archs = "x86_64 arm64"
#test-skip = "*_arm64"
#
#[tool.cibuildwheel.windows]
#before-build = "pip install delvewheel"
#repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel}"
#
#[[tool.cibuildwheel.overrides]]
#select = "*-musllinux*"
#before-test = "apk update && apk add musl-locales"
#
#[[tool.cibuildwheel.overrides]]
#select = "*-win*"
## We test separately for Windows, since we use
## the windowsservercore docker image to check if any dlls are
## missing from the wheel
#test-command = ""
#
#[[tool.cibuildwheel.overrides]]
## Don't strip wheels on macOS.
## macOS doesn't support stripping wheels with linker
## https://github.com/MacPython/numpy-wheels/pull/87#issuecomment-624878264
#select = "*-macosx*"
#environment = {CFLAGS="-g0"}
#
#[tool.ruff]
#line-length = 88
#target-version = "py310"
#fix = true
#unfixable = []
#typing-modules = ["pandas._typing"]
#
#select = [
#  # pyflakes
#  "F",
#  # pycodestyle
#  "E", "W",
#  # flake8-2020
#  "YTT",
#  # flake8-bugbear
#  "B",
#  # flake8-quotes
#  "Q",
#  # flake8-debugger
#  "T10",
#  # flake8-gettext
#  "INT",
#  # pylint
#  "PL",
#  # flake8-pytest-style
#  "PT",
#  # misc lints
#  "PIE",
#  # flake8-pyi
#  "PYI",
#  # tidy imports
#  "TID",
#  # implicit string concatenation
#  "ISC",
#  # type-checking imports
#  "TCH",
#  # comprehensions
#  "C4",
#  # pygrep-hooks
#  "PGH",
#  # Ruff-specific rules
#  "RUF",
#  # flake8-bandit: exec-builtin
#  "S102",
#  # numpy-legacy-random
#  "NPY002",
#  # Perflint
#  "PERF",
#  # flynt
#  "FLY",
#  # flake8-logging-format
#  "G",
#  # flake8-future-annotations
#  "FA",
#]
#
#ignore = [
#  ### Intentionally disabled
#  # space before : (needed for how black formats slicing)
#  "E203",
#  # module level import not at top of file
#  "E402",
#  # do not assign a lambda expression, use a def
#  "E731",
#  # line break before binary operator
#  # "W503",  # not yet implemented
#  # line break after binary operator
#  # "W504",  # not yet implemented
#  # controversial
#  "B006",
#  # controversial
#  "B007",
#  # controversial
#  "B008",
#  # setattr is used to side-step mypy
#  "B009",
#  # getattr is used to side-step mypy
#  "B010",
#  # tests use assert False
#  "B011",
#  # tests use comparisons but not their returned value
#  "B015",
#  # false positives
#  "B019",
#  # Loop control variable overrides iterable it iterates
#  "B020",
#  # Function definition does not bind loop variable
#  "B023",
#  # Functions defined inside a loop must not use variables redefined in the loop
#  # "B301",  # not yet implemented
#  # Only works with python >=3.10
#  "B905",
#  # Too many arguments to function call
#  "PLR0913",
#  # Too many returns
#  "PLR0911",
#  # Too many branches
#  "PLR0912",
#  # Too many statements
#  "PLR0915",
#  # Redefined loop name
#  "PLW2901",
#  # Global statements are discouraged
#  "PLW0603",
#  # Docstrings should not be included in stubs
#  "PYI021",
#  # Use `typing.NamedTuple` instead of `collections.namedtuple`
#  "PYI024",
#  # No builtin `eval()` allowed
#  "PGH001",
#  # compare-to-empty-string
#  "PLC1901",
#  # while int | float can be shortened to float, the former is more explicit
#  "PYI041",
#  # incorrect-dict-iterator, flags valid Series.items usage
#  "PERF102",
#  # try-except-in-loop, becomes useless in Python 3.11
#  "PERF203",
#  # pytest-missing-fixture-name-underscore
#  "PT004",
#  # pytest-incorrect-fixture-name-underscore
#  "PT005",
#  # pytest-parametrize-names-wrong-type
#  "PT006",
#  # pytest-parametrize-values-wrong-type
#  "PT007",
#  # pytest-patch-with-lambda
#  "PT008",
#  # pytest-raises-with-multiple-statements
#  "PT012",
#  # pytest-assert-in-except
#  "PT017",
#  # pytest-composite-assertion
#  "PT018",
#  # pytest-fixture-param-without-value
#  "PT019",
#  # The following rules may cause conflicts when used with the formatter:
#  "ISC001",
#
#
#  ### TODO: Enable gradually
#  # Useless statement
#  "B018",
#  # Within an except clause, raise exceptions with ...
#  "B904",
#  # Magic number
#  "PLR2004",
#  # comparison-with-itself
#  "PLR0124",
#  # Consider `elif` instead of `else` then `if` to remove indentation level
#  "PLR5501",
#  # collection-literal-concatenation
#  "RUF005",
#  # pairwise-over-zipped (>=PY310 only)
#  "RUF007",
#  # explicit-f-string-type-conversion
#  "RUF010",
#  # mutable-class-default
#  "RUF012"
#]
#
#exclude = [
#  "env",
#]
#
#[tool.ruff.per-file-ignores]
## relative imports allowed for asv_bench
#"asv_bench/*" = ["TID", "NPY002"]
## to be enabled gradually
#"pandas/core/*" = ["PLR5501"]
#"pandas/tests/*" = ["B028", "FLY"]
#"scripts/*" = ["B028"]
## Keep this one enabled
#"pandas/_typing.py" = ["TCH"]
#
#[tool.ruff.lint.flake8-pytest-style]
#fixture-parentheses = false
#mark-parentheses = false
#
#[tool.pylint.messages_control]
#max-line-length = 88
#disable = [
# # intentionally turned off
#  "bad-mcs-classmethod-argument",
#  "broad-except",
#  "c-extension-no-member",
#  "comparison-with-itself",
#  "consider-using-enumerate",
#  "import-error",
#  "import-outside-toplevel",
#  "invalid-name",
#  "invalid-unary-operand-type",
#  "line-too-long",
#  "no-else-continue",
#  "no-else-raise",
#  "no-else-return",
#  "no-member",
#  "no-name-in-module",
#  "not-an-iterable",
#  "overridden-final-method",
#  "pointless-statement",
#  "redundant-keyword-arg",
#  "singleton-comparison",
#  "too-many-ancestors",
#  "too-many-arguments",
#  "too-many-boolean-expressions",
#  "too-many-branches",
#  "too-many-function-args",
#  "too-many-instance-attributes",
#  "too-many-locals",
#  "too-many-nested-blocks",
#  "too-many-public-methods",
#  "too-many-return-statements",
#  "too-many-statements",
#  "unexpected-keyword-arg",
#  "ungrouped-imports",
#  "unsubscriptable-object",
#  "unsupported-assignment-operation",
#  "unsupported-membership-test",
#  "unused-import",
#  "use-dict-literal",
#  "use-implicit-booleaness-not-comparison",
#  "use-implicit-booleaness-not-len",
#  "wrong-import-order",
#  "wrong-import-position",
#  "redefined-loop-name",
#
# # misc
#  "abstract-class-instantiated",
#  "no-value-for-parameter",
#  "undefined-variable",
#  "unpacking-non-sequence",
#  "used-before-assignment",
#
# # pylint type "C": convention, for programming standard violation
#  "missing-class-docstring",
#  "missing-function-docstring",
#  "missing-module-docstring",
#  "superfluous-parens",
#  "too-many-lines",
#  "unidiomatic-typecheck",
#  "unnecessary-dunder-call",
#  "unnecessary-lambda-assignment",
#
#  # pylint type "R": refactor, for bad code smell
#  "consider-using-with",
#  "cyclic-import",
#  "duplicate-code",
#  "inconsistent-return-statements",
#  "redefined-argument-from-local",
#  "too-few-public-methods",
#
#  # pylint type "W": warning, for python specific problems
#  "abstract-method",
#  "arguments-differ",
#  "arguments-out-of-order",
#  "arguments-renamed",
#  "attribute-defined-outside-init",
#  "broad-exception-raised",
#  "comparison-with-callable",
#  "dangerous-default-value",
#  "deprecated-module",
#  "eval-used",
#  "expression-not-assigned",
#  "fixme",
#  "global-statement",
#  "invalid-overridden-method",
#  "keyword-arg-before-vararg",
#  "possibly-unused-variable",
#  "protected-access",
#  "raise-missing-from",
#  "redefined-builtin",
#  "redefined-outer-name",
#  "self-cls-assignment",
#  "signature-differs",
#  "super-init-not-called",
#  "try-except-raise",
#  "unnecessary-lambda",
#  "unused-argument",
#  "unused-variable",
#  "using-constant-test"
#]
#
#[tool.pytest.ini_options]
## sync minversion with pyproject.toml & install.rst
#minversion = "7.3.2"
#addopts = "--strict-markers --strict-config --capture=no --durations=30 --junitxml=test-data.xml"
#empty_parameter_set_mark = "fail_at_collect"
#xfail_strict = true
#testpaths = "pandas"
#doctest_optionflags = [
#  "NORMALIZE_WHITESPACE",
#  "IGNORE_EXCEPTION_DETAIL",
#  "ELLIPSIS",
#]
#filterwarnings = [
#  "error:::pandas",
#  "error::ResourceWarning",
#  "error::pytest.PytestUnraisableExceptionWarning",
#  # TODO(PY311-minimum): Specify EncodingWarning
#  # Ignore 3rd party EncodingWarning but raise on pandas'
#  "ignore:.*encoding.* argument not specified",
#  "error:.*encoding.* argument not specified::pandas",
#  "ignore:.*ssl.SSLSocket:pytest.PytestUnraisableExceptionWarning",
#  "ignore:.*ssl.SSLSocket:ResourceWarning",
#  # GH 44844: Can remove once minimum matplotlib version >= 3.7
#  "ignore:.*FileIO:pytest.PytestUnraisableExceptionWarning",
#  "ignore:.*BufferedRandom:ResourceWarning",
#  "ignore::ResourceWarning:asyncio",
#  # From plotting doctests
#  "ignore:More than 20 figures have been opened:RuntimeWarning",
#  # Will be fixed in numba 0.56: https://github.com/numba/numba/issues/7758
#  "ignore:`np.MachAr` is deprecated:DeprecationWarning:numba",
#  "ignore:.*urllib3:DeprecationWarning:botocore",
#  "ignore:Setuptools is replacing distutils.:UserWarning:_distutils_hack",
#  # https://github.com/PyTables/PyTables/issues/822
#  "ignore:a closed node found in the registry:UserWarning:tables",
#  "ignore:`np.object` is a deprecated:DeprecationWarning:tables",
#  "ignore:tostring:DeprecationWarning:tables",
#  "ignore:distutils Version classes are deprecated:DeprecationWarning:pandas_datareader",
#  "ignore:distutils Version classes are deprecated:DeprecationWarning:numexpr",
#  "ignore:distutils Version classes are deprecated:DeprecationWarning:fastparquet",
#  "ignore:distutils Version classes are deprecated:DeprecationWarning:fsspec",
#  # Can be removed once https://github.com/numpy/numpy/pull/24794 is merged
#  "ignore:.*In the future `np.long` will be defined as.*:FutureWarning",
#]
#junit_family = "xunit2"
#markers = [
#  "single_cpu: tests that should run on a single cpu only",
#  "slow: mark a test as slow",
#  "network: mark a test as network",
#  "db: tests requiring a database (mysql or postgres)",
#  "clipboard: mark a pd.read_clipboard test",
#  "arm_slow: mark a test as slow for arm64 architecture",
#  "skip_ubsan: Tests known to fail UBSAN check",
#]
#
#[tool.mypy]
## Import discovery
#mypy_path = "typings"
#files = ["pandas", "typings"]
#namespace_packages = false
#explicit_package_bases = false
#ignore_missing_imports = true
#follow_imports = "normal"
#follow_imports_for_stubs = false
#no_site_packages = false
#no_silence_site_packages = false
## Platform configuration
#python_version = "3.11"
#platform = "linux-64"
## Disallow dynamic typing
#disallow_any_unimported = false # TODO
#disallow_any_expr = false # TODO
#disallow_any_decorated = false # TODO
#disallow_any_explicit = false # TODO
#disallow_any_generics = false # TODO
#disallow_subclassing_any = false # TODO
## Untyped definitions and calls
#disallow_untyped_calls = true
#disallow_untyped_defs = true
#disallow_incomplete_defs = true
#check_untyped_defs = true
#disallow_untyped_decorators = true
## None and Optional handling
#no_implicit_optional = true
#strict_optional = true
## Configuring warnings
#warn_redundant_casts = true
#warn_unused_ignores = true
#warn_no_return = true
#warn_return_any = false # TODO
#warn_unreachable = false # GH#27396
## Suppressing errors
#ignore_errors = false
#enable_error_code = "ignore-without-code"
## Miscellaneous strictness flags
#allow_untyped_globals = false
#allow_redefinition = false
#local_partial_types = false
#implicit_reexport = true
#strict_equality = true
## Configuring error messages
#show_error_context = false
#show_column_numbers = false
#show_error_codes = true
#
#
## To be kept consistent with "Import Formatting" section in contributing.rst
#[tool.isort]
#known_pre_libs = "pandas._config"
#known_pre_core = ["pandas._libs", "pandas._typing", "pandas.util._*", "pandas.compat", "pandas.errors"]
#known_dtypes = "pandas.core.dtypes"
#known_post_core = ["pandas.tseries", "pandas.io", "pandas.plotting"]
#sections = ["FUTURE", "STDLIB", "THIRDPARTY" ,"PRE_LIBS" , "PRE_CORE", "DTYPES", "FIRSTPARTY", "POST_CORE", "LOCALFOLDER"]
#profile = "black"
#combine_as_imports = true
#force_grid_wrap = 2
#force_sort_within_sections = true
#skip_glob = "env"
#skip = "pandas/__init__.py"
#
#[tool.pyright]
#pythonVersion = "3.11"
#typeCheckingMode = "basic"
#useLibraryCodeForTypes = false
#include = ["pandas", "typings"]
#exclude = ["pandas/tests", "pandas/io/clipboard", "pandas/util/version", "pandas/core/_numba/extensions.py"]
## enable subset of "strict"
#reportDuplicateImport = true
#reportInconsistentConstructor = true
#reportInvalidStubStatement = true
#reportOverlappingOverload = true
#reportPropertyTypeMismatch = true
#reportUntypedClassDecorator = true
#reportUntypedFunctionDecorator = true
#reportUntypedNamedTuple = true
#reportUnusedImport = true
#disableBytesTypePromotions = true
## disable subset of "basic"
#reportGeneralTypeIssues = false
#reportMissingModuleSource = false
#reportOptionalCall = false
#reportOptionalIterable = false
#reportOptionalMemberAccess = false
#reportOptionalOperand = false
#reportOptionalSubscript = false
#reportPrivateImportUsage = false
#reportUnboundVariable = false
#
#[tool.coverage.run]
#branch = true
#omit = ["pandas/_typing.py", "pandas/_version.py"]
#plugins = ["Cython.Coverage"]
#source = ["pandas"]
#
#[tool.coverage.report]
#ignore_errors = false
#show_missing = true
#omit = ["pandas/_version.py"]
#exclude_lines = [
#  # Have to re-enable the standard pragma
#  "pragma: no cover",
#  # Don't complain about missing debug-only code:s
#  "def __repr__",
#  "if self.debug",
#  # Don't complain if tests don't hit defensive assertion code:
#  "raise AssertionError",
#  "raise NotImplementedError",
#  "AbstractMethodError",
#  # Don't complain if non-runnable code isn't run:
#  "if 0:",
#  "if __name__ == .__main__.:",
#  "if TYPE_CHECKING:",
#]
#
#[tool.coverage.html]
#directory = "coverage_html_report"
#
#[tool.codespell]
#ignore-words-list = "blocs, coo, hist, nd, sav, ser, recuse, nin, timere, expec, expecs"
#ignore-regex = 'https://([\w/\.])+'